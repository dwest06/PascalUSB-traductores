INICIO -> program BLOQUE 
	| program

BLOQUE -> begin declare DECLARACION SECUENCIACION end
	| begin INSTRUCCION end

DECLARACION -> VARIABLES as TIPOS ; DECLARACION
	| VARIABLES as TIPOS ;

VARIABLES -> ID , VARIABLES
	| ID
	| EXPRESION
	| EXPRESION , VARIABLES

ID -> identificador

TIPOS -> TIPO 
	| TIPO , TIPOS

TIPO -> inter
	| int
	| bool

SECUENCIACION -> INSTRUCCION
	| INSTRUCCION ; SECUENCIACION

INSTRUCCION -> IO
	| VARIABLES asig EXPRESION 
	| CONDICIONAL
	| ITERACION
	| BLOQUE
	#Falta ver por la postcondicion, si de verdad es lo ultimo que se ejecuta en un codigo

IO -> read ID
	| read EXPRESION soFarth EXPRESION
	| print VARIABLES
	| println VARIABLES

CONDICIONAL -> if EXPRESION then SECUENCIACION else SECUENCIACION
	| if EXPRESION then SECUENCIACION
	| case EXPRESION of CASOS end

CASOS -> EXPRESION ==> SECUENCIACION
	| EXPRESION ==> SECUENCIACION CASOS

ITERACION -> for ID in inter do SECUENCIACION
	| while EXPRESION do SECUENCIACION

EXPRESION -> EXPINT
	| EXPBOOL
	| EXPINTER

EXPINT -> numero
	| EXPRESION mas EXPRESION 
	| EXPRESION menos EXPRESION
	| EXPRESION div EXPRESION
	| EXPRESION mult EXPRESION
	| EXPRESION mod EXPRESION
	| menos EXPRESION

EXPBOOL -> true
	| false
	| EXPRESION and EXPRESION
	| EXPRESION or EXPRESION
	| not EXPRESION
	| EXPRESION mayor EXPRESION
	| EXPRESION menor EXPRESION
	| EXPRESION mayorigual EXPRESION
	| EXPRESION menorigual EXPRESION
	| EXPRESION igual EXPRESION
	| EXPRESION diferente EXPRESION

EXPINTER -> EXPRESION soFarth EXPRESION
	| EXPRESION suma EXPRESION
	| EXPRESION inter EXPRESION
	| EXPRESION escala EXPRESION


POSTCOND -> llaveAbre Post : EXPRESIONPOST llaveCierra

EXPRESIONPOST -> openPar forall VARIABLE pipe VARIABLE in VARIABLE : EXPRESIONPOST closepar
	| openPar forall VARIABLE pipe VARIABLE in VARIABLE : EXPRESION closepar
	| openPar exist VARIABLE pipe VARIABLE in VARIABLE : EXPRESIONPOST closepar
	| openPar exist VARIABLE pipe VARIABLE in VARIABLE : EXPRESION closepar
